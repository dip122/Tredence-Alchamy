

-- Identify the staff member who generated the most revenue in the last 6 months. Include their ID,
-- name, and total amount.

select * from staff;
select * from store;

SELECT s.staff_id, CONCAT(s.first_name, ' ', s.last_name) AS staff_name, SUM(p.amount) AS total_revenue
FROM payment p
JOIN staff s ON p.staff_id = s.staff_id
WHERE p.payment_date >= DATE_SUB('2006-02-14', INTERVAL 6 MONTH)
GROUP BY s.staff_id
ORDER BY total_revenue DESC
LIMIT 1;

-- For each staff member, calculate the average number of rentals processed per month

select count(distinct date_format(rental_date, "%Y-%m")) as total_months from rental; -- 5 distinct months is present
select 
s.staff_id , concat(s.first_name , ' ' , s.last_name) as staff_name,
count(r.rental_id) as rental_counts,
ROUND(count(r.rental_id)/count(distinct DATE_FORMAT(r.rental_date , "%Y-%m")) , 2 ) as average_rentals_per_month 
from rental r 
join staff s on r.staff_id = s.staff_id
group by s.staff_id , s.first_name , s.last_name
order by rental_counts;

-- Find the staff member with the most active customers (customers with more than 3 rentals handled by the same staff).

with active_customers as (
	select staff_id , customer_id 
	from rental 
	group by staff_id , customer_id
	having count(rental_id) > 3
)

select s.staff_id , concat(s.first_name , ' ' , s.last_name) as staff_name,
count(ac.customer_id) as active_customer_count
from active_customers ac 
join staff s on ac.staff_id = s.staff_id
group by s.staff_id , staff_name
order by active_customer_count desc
limit 1;

-- Determine the percentage of total revenue generated by each staff member. Present as percentage share.

select s.staff_id , concat(s.first_name ,' ' , s.last_name) as staff_name,
SUM(p.amount) as total_revenue ,
ROUND((SUM(p.amount)/(select SUM(amount) from payment))*100, 2) as percentage_total_revenue
from payment p
join staff s on s.staff_id = p.staff_id
group by s.staff_id
order by percentage_total_revenue desc;
-- Calculate the average payment amount processed per transaction by each staff member

select s.staff_id, concat(s.first_name , ' ' , s.last_name) as staff_name,
SUM(p.amount) as total_amount,
count(payment_id) as total_transactions ,
ROUND(SUM(p.amount)/count(payment_id) , 2) as average_payment_per_transactions
from payment p join staff s 
on p.staff_id = s.staff_id
group by s.staff_id , s.first_name , s.last_name;

-- List the staff members who processed rentals for the highest number of unique customers.

select s.staff_id  , concat (s.first_name , ' ' , s.last_name) as staff_name ,
count(distinct customer_id) as unique_customers
from rental r 
join staff s on r.staff_id = s.staff_id
group by s.staff_id , s.first_name , s.last_name
order by unique_customers desc
limit 1;

-- What is the most common film category rented per staff member?

with new_ranked_table as (
	select r.staff_id , c.name , count(*) as total_count,
	rank() over(partition by r.staff_id order by count(*) desc) as rank_film_count
	from rental r
	join inventory i on r.inventory_id = i.inventory_id
	join film f on f.film_id = i.film_id
	join film_category fc on fc.film_id = f.film_id
	join category c on c.category_id = fc.category_id
	group by r.staff_id , c.name
	order by r.staff_id
)
select staff_id , name as category , total_count as flim_freq
from new_ranked_table where rank_film_count = 1
order by flim_freq desc;

-- Which staff member handled the most rentals on weekends (Saturday and Sunday)?

select r.staff_id , concat(s.first_name , ' ' , s.last_name ) as staff_name,
count(*) weekend_rentals
from rental r 
join staff s on r.staff_id = s.staff_id
where dayofweek(r.rental_date) in (1,7)
group by r.staff_id
order by weekend_rentals desc
limit 1;

-- Compare average revenue generated by staff during weekdays vs. weekends.

select r.staff_id , concat(s.first_name , ' ' , s.last_name) as staff_name,
case when dayofweek(p.payment_date) in (1,7) then 'weekend' else 'weekday' end as day_type,
ROUND(avg(p.amount) , 2) as average_revenue_per_transactions
from payment p
join rental r on p.rental_id = r.rental_id
join staff s on s.staff_id = r.staff_id
group by r.staff_id , s.first_name , s.last_name , day_type
order by average_revenue_per_transactions desc;


-- Find the average delay between rental and return per staff member and identify the staff with the
-- lowest average delay.

select r.staff_id , concat(s.first_name , ' ' , s.last_name) as staff_name,
ROUND(avg(timestampdiff(second , r.rental_date , r.return_date)) / 3600,2) as average_delay_hour from rental r 
join staff s on r.staff_id = s.staff_id
where r.return_date is not NULL
group by r.staff_id
order by average_delay_hour;
